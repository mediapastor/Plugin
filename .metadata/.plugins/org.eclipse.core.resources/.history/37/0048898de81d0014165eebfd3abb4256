package com.tvd.gameview.views;

import org.eclipse.jface.resource.FontRegistry;
import org.eclipse.jface.resource.ImageRegistry;
import org.eclipse.jface.viewers.IFontProvider;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.jface.viewers.DelegatingStyledCellLabelProvider.IStyledLabelProvider;
import org.eclipse.jface.viewers.StyledString;

public class BuildingListLabelProvider extends LabelProvider
		implements IStyledLabelProvider, IFontProvider {

	private final ImageRegistry ir;
	private final FontRegistry fr;
	
//	public TimeZoneLabelProvider(ImageRegistry ir) {
//		this.ir = ir;
//	}
	
	public BuildingListLabelProvider(ImageRegistry ir, FontRegistry fr) {
		this.ir = ir;
		this.fr = fr;
	}
	
	@SuppressWarnings("rawtypes")
	@Override
	public String getText(Object element) {
		if(element instanceof Map) {
			return "Time Zones";
		}
		else if(element instanceof Map.Entry) {
			return ((Map.Entry)element).getKey().toString();
		}
		else if(element instanceof TimeZone) {
			return ((TimeZone)element).getID().split("/")[1];
		}
		else {
			return "Unknown type: " + element.getClass();
		}
	}
	
	public Image getImage(Object element) {
		if(element instanceof Map.Entry) {
			return ir.get("sample");
		} else if(element instanceof TimeZone) {
			return ir.get("sample");
		} else {
			return super.getImage(element);
		}
//		if(element instanceof Map.Entry) {
//			return PlatformUI.getWorkbench()
//					.getSharedImages()
//					.getImage(ISharedImages.IMG_OBJ_FOLDER);
//		}
//		else {
//			return super.getImage(element);
//		}
	}

	@Override
	public StyledString getStyledText(Object element) {
		String text = getText(element);
		StyledString ss = new StyledString(text);
		if(element instanceof String) {
			ss.append(element.toString(),
					StyledString.DECORATIONS_STYLER);
		}
		return ss;
	}

	@Override
	public Font getFont(Object element) {
		Font italic = fr.getItalic(JFaceResources.DEFAULT_FONT);
		return italic;
	}
	
}
