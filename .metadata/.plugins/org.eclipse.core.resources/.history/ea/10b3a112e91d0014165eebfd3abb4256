package com.tvd.gameview.views;

import java.util.Map;

import org.eclipse.jface.resource.FontRegistry;
import org.eclipse.jface.resource.ImageRegistry;
import org.eclipse.jface.resource.JFaceResources;
import org.eclipse.jface.viewers.IFontProvider;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.jface.viewers.DelegatingStyledCellLabelProvider.IStyledLabelProvider;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.swt.graphics.Font;
import org.eclipse.swt.graphics.Image;

public class BuildingListLabelProvider extends LabelProvider
		implements IStyledLabelProvider, IFontProvider {
	
	public BuildingListLabelProvider(ImageRegistry mImageRegistry, FontRegistry mFontRegistry) {
		this.mImageRegistry = mImageRegistry;
		this.mFontRegistry = mFontRegistry;
	}
	
	@Override
	public String getText(Object element) {
		if(element instanceof String) {
			return "String";
		}
		else {
			return "Unknown type: " + element.getClass();
		}
	}
	
	public Image getImage(Object element) {
		if(element instanceof Map.Entry) {
			return mImageRegistry.get("sample");
		} else if(element instanceof String) {
			return mImageRegistry.get("sample");
		} else {
			return super.getImage(element);
		}
	}

	@Override
	public StyledString getStyledText(Object element) {
		String text = getText(element);
		StyledString ss = new StyledString(text);
		if(element instanceof String) {
			ss.append(element.toString(),
					StyledString.DECORATIONS_STYLER);
		}
		return ss;
	}

	@Override
	public Font getFont(Object element) {
		Font italic = mFontRegistry.getItalic(
				JFaceResources.DEFAULT_FONT);
		return italic;
	}
	
	private final ImageRegistry mImageRegistry;
	private final FontRegistry mFontRegistry;
	
}
