package com.tvd.study.linuxsagas.plugin.utils;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.QualifiedName;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.IViewReference;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.navigator.CommonNavigator;

import com.tvd.study.linuxsagas.plugin.Activator;

public class ProjectUtils {

	public static IProject[] getProjects() {
		IProject[] projects = ResourcesPlugin.getWorkspace().getRoot().getProjects();
		
		return projects;
	}
	
	public static IPath getSelectedProjectPath() {
		IPath path = null;
	    IProject targetProject = null;
//	    if (targetProject == null) {
//            // Try to figure out the project from the active editor
//            IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
//            if (window != null) {
//                IWorkbenchPage page = window.getActivePage();
//                if (page != null) {
//                    IEditorPart activeEditor = page.getActiveEditor();
//                    if (activeEditor instanceof AndroidXmlEditor) {
//                        Object input = ((AndroidXmlEditor) activeEditor).getEditorInput();
//                        if (input instanceof FileEditorInput) {
//                            FileEditorInput fileInput = (FileEditorInput) input;
//                            targetScore = 1;
//                            IFile file = fileInput.getFile();
//                            targetProject = file.getProject();
//                            IPath path = file.getParent().getProjectRelativePath();
//                            targetWsFolderPath = path != null ? path.toString() : null;
//                        }
//                    }
//                }
//            }
//        }

        if (targetProject == null) {
            // If we didn't find a default project based on the selection, check how many
            // open Android projects we can find in the current workspace. If there's only
            // one, we'll just select it by default.

            IJavaProject[] projects = BaseProjectHelper.getAndroidProjects(new IProjectFilter() {
                public boolean accept(IProject project) {
                    return project.isAccessible();
                }
            });

            if (projects != null && projects.length == 1) {
                targetScore = 1;
                targetProject = projects[0].getProject();
            }
        }
	    
	    return path;
	}
	
	public static String getActiveProjectName() {
		/**
		 * if you have an editor opened
		 * IEditorPart  editorPart =
		getSite().getWorkbenchWindow().getActivePage().getActiveEditor();
		
		if(editorPart  != null)
		{
		    IFileEditorInput input = (IFileEditorInput)editorPart.getEditorInput() ;
		    IFile file = input.getFile();
		    IProject activeProject = file.getProject();
		    String activeProjectName = activeProject.getName();
		    //... use activeProjectName 
		}
		*/
		IViewReference [] parts = Activator.getDefault()
				.getWorkbench().getActiveWorkbenchWindow().getActivePage().getViewReferences();
		IProject activeProject = null;

		for(int i = 0 ; i < parts.length ; i++) {
			if(parts[i].getView(false) instanceof CommonNavigator) {
				CommonNavigator navigator = (CommonNavigator)parts[i].getView(false);
				StructuredSelection sel   =
						(StructuredSelection)navigator.getCommonViewer().getSelection();
				IResource resource = (IResource)sel.getFirstElement();
				activeProject = resource.getProject();
			    break;
			}
		}
		String activeProjectName = activeProject.getName();
		return activeProjectName;
	}
	
	public static List<IProject> getSdkProjects() {
		IProject[] projects = getProjects();
		List<IProject> result = new ArrayList<IProject>();
		for(IProject project : projects) {
			try {
				String persistentProperty = 
						project.getPersistentProperty(new QualifiedName("tvd", "author"));
				if(persistentProperty != null && persistentProperty.equals("tvd")) {
					result.add(project);
				}
			} catch (CoreException e) {
				e.printStackTrace();
			}
		}
		
		return result;
	}
	
	public static List<String> getSdkProjectNames() {
		IProject[] projects = getProjects();
		List<String> result = new ArrayList<String>();
		for(IProject project : projects) {
			try {
				String persistentProperty = 
						project.getPersistentProperty(new QualifiedName("tvd", "author"));
				if(persistentProperty != null && persistentProperty.equals("tvd")) {
					result.add(project.getName());
				}
			} catch (CoreException e) {
				e.printStackTrace();
			}
		}
		
		return result;
	}
	
	public static IProject findSdkProject(String pName) {
		List<IProject> projects = getSdkProjects();
		IProject result = null;
		for(IProject project : projects) {
			if(project.getName().equals(pName)) {
				result = project;
			}
		}
		
		return result;
	}
}
