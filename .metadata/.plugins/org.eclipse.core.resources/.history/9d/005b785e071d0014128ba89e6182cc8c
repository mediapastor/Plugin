package com.tvd.study.linuxsagas.plugin.utils;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.QualifiedName;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.ui.IViewReference;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.navigator.CommonNavigator;

import com.tvd.study.linuxsagas.plugin.Activator;

public class ProjectUtils {

	public static IProject[] getProjects() {
		IProject[] projects = ResourcesPlugin.getWorkspace().getRoot().getProjects();
		
		return projects;
	}
	
	public static IResource extractSelection(ISelection sel) {
		IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
		sel = window.getSelectionService().getSelection();
	      if (!(sel instanceof IStructuredSelection))
	          return null;
	       IStructuredSelection ss = (IStructuredSelection) sel;
	       Object element = ss.getFirstElement();
	       if (element instanceof IResource)
	          return (IResource) element;
	       if (!(element instanceof IAdaptable))
	          return null;
	       IAdaptable adaptable = (IAdaptable)element;
	       Object adapter = adaptable.getAdapter(IResource.class);
	       System.out.println("ProjectUtils.extractSelection " + 
	    		   ((IResource)adapter).getProject().getName());
	       return (IResource) adapter;
	   }
	
	public static IPath getProjectPath() {
		IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
		IPath path = null;
	    if (window != null)
	    {
	        IStructuredSelection selection = (IStructuredSelection) window.getSelectionService().getSelection();
	        Object firstElement = selection.getFirstElement();
	        if (firstElement instanceof IAdaptable)
	        {
	            IProject project = (IProject)((IAdaptable)firstElement).getAdapter(IProject.class);
	            path = project.getFullPath();
	            
	            System.out.println("Pro");
	        }
	    }
	    
	    return path;
	}
	
	public static String getActiveProjectName() {
		
	}
	
	public static List<IProject> getSdkProjects() {
		IProject[] projects = getProjects();
		List<IProject> result = new ArrayList<IProject>();
		for(IProject project : projects) {
			try {
				String persistentProperty = 
						project.getPersistentProperty(new QualifiedName("tvd", "author"));
				if(persistentProperty != null && persistentProperty.equals("tvd")) {
					result.add(project);
				}
			} catch (CoreException e) {
				e.printStackTrace();
			}
		}
		
		return result;
	}
	
	public static List<String> getSdkProjectNames() {
		IProject[] projects = getProjects();
		List<String> result = new ArrayList<String>();
		for(IProject project : projects) {
			try {
				String persistentProperty = 
						project.getPersistentProperty(new QualifiedName("tvd", "author"));
				if(persistentProperty != null && persistentProperty.equals("tvd")) {
					result.add(project.getName());
				}
			} catch (CoreException e) {
				e.printStackTrace();
			}
		}
		
		return result;
	}
	
	public static IProject findSdkProject(String pName) {
		List<IProject> projects = getSdkProjects();
		IProject result = null;
		for(IProject project : projects) {
			if(project.getName().equals(pName)) {
				result = project;
			}
		}
		
		return result;
	}
}
