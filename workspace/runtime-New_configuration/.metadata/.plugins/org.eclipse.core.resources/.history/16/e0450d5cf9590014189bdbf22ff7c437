#
# create templates
#

#CCSprite declaring template
{tab}CCSprite* {var_name};

#end

#CCSprite implementing template
{tab}{var_name} = //{n}{tab}{tab}Sprite::create(D::id.{image_name}.c_str());
{tab}{var_name}->setPosition(GPARAMS()->{position_name});
{tab}{parent_name}->addChild({var_name}, {z-index});

#end

#CCSprite in function template
{tab}Sprite* {var_name} = //{n}{tab}{tab}Sprite::create(D::id.{image_name}.c_str());
{tab}{var_name}->setPosition(GPARAMS()->{position_name});
{tab}{parent_name}->addChild({var_name}, {z-index});

#end

#CCSprite non-add template
{tab}{var_name} = //{n}{tab}{tab}Sprite::create(D::id.{image_name}.c_str());
{tab}{var_name}->setPosition(GPARAMS()->{position_name});

#end

#CCSprite unlocated in function template
{tab}CCSprite* {var_name} = //{n}{tab}{tab}Sprite::create(D::id.{image_name}.c_str());

#end

#CCSprite non-add unlocated template
{tab}{var_name} = //{n}{tab}{tab}CCSprite::create(D::id.{image_name}.c_str());

#end

#CCSprite unlocated implementing template
{tab}{var_name} = //{n}{tab}{tab}CCSprite::create(D::id.{image_name}.c_str());

#end

#Common implementing template
{tab}{var_name} = {extend_class_name}::create(D::id.{image_name}.c_str());
{tab}{var_name}->setPosition(GPARAMS()->{position_name});
{tab}{parent_name}->addChild({var_name}, {z-index});

#end

#=================== for class generating ============

#CCSprite class declaring template
/**
* This file is auto generated by Twin Dragons Tools
* {class_name}.h
* {project_name}
*
* Created by {author} on {created_date}
*
**/

#ifndef __{project_name}__{class_name}__
#define __{project_name}__{class_name}__

#include "cocos-ext.h"

#include "cocos2d.h"
#include "Defines.h"

using namespace std;
using namespace cocos2d;
using namespace cocos2d::extension;

//{n}
class {class_name} : public {super_name} {
public:
	static {class_name}* create(//{parameters}
								);
	virtual bool init(//{parameters}
					);
protected:
	virtual void addSprites();
    virtual void addLabels();
    virtual void addMenus();
    virtual void addMenuItems();
private:
	enum ElementTag {
		//{element_tags}
	};
	void {class_name_prefix}MenuItemCallback(CCObject *pSender);
	//{properties_declare}
	//{extend_functions_declaring}
};

//{n}
#endif /* defined(__{project_name}__{class_name}__) */

#end

#CCSprite class implementing template
/**
* This file is auto generated by TVD Tools
* {class_name}.cpp
* {project_name}
*
* Created by {author} on {created_date}
*
**/

#include "{class_name}.h"
#include "GameParams.h"

//{n}
{class_name}* {class_name}::create(//{parameters}
									) {
    {class_name}* pRet = new {class_name}();
    pRet->autorelease();
    pRet->init(//{importing_params}
    			);
    
    return pRet;
}

//{n}
bool {class_name}::init(//{parameters}
						) {             
	//{assigning_area}
	this->addSprites();
	this->addMenus();
	this->addMenuItems();
	this->addLabels();
    return {super_name}::initWithFile(D::id.{background_id}.c_str());
}

//{n}
void {class_name}::addMenus() {
    //{add_menus}
}

//{n}
void {class_name}::addMenuItems() {
    //{add_menuitems}
}

//{n}
void {class_name}::addSprites() {
   	//{add_sprites}
}

//{n}
void {class_name}::addLabels() {
   //{add_labels}
}

//{n}
//{extend_functions_implementing}

//{n}
void {class_name}::{class_name_prefix}MenuItemCallback(CCObject *pSender) {
    
    CCMenuItem* menuItem = static_cast<CCMenuItem*>(pSender);
        
    switch (menuItem->getTag()) {
        //{menuitem_cases}
    }
}

//====================== end ======================
#end

